#!/bin/sh
has() {
  case "$(command -v $1 2>/dev/null)" in
    alias*|"") return 1
  esac
}
deps() {
  deps="jq curl"
  missing=0
  for i in $deps; do
    has $i || { echo "$i IS MISSING!"; exit 1; }
  done
  # Check for ssl
  curl -V | grep tls -i -q || {
    curl -V | grep ssl -i -q || {
      echo "!!SSL/TLS SUPPORT IS MISSING FROM CURL!!"
      echo "!!SOME SERVICES MAY NOT CONNECT!!"
      export http="http"
    }
  }
  [ ! "$http" ] && { export http="https"; } # default to https
}
count() {
  c=0; IFS=' +'; for i in $1; do
    : $((c+=1))
  done
  echo "$c"
  # pure shell counter function

  # heredocs are used as piping to the while loop puts the while loop in a subshell
  # due to this subshell the value of $c is forgotten once the loop ends
  # heredocs don't create a subshell, but are able to redirect the contents of a subshell
  unset IFS
}
danbooru(){
  [ $(count "$2") -gt "2" ] && { echo "danbooru is maxed to 2 tags.. limiting search..."; }
  # tag limiter
  tags=$(echo "$2" | tr ' ' '+' | sed -e 's/+/ /' -e 's/+.*//g' | tr ' ' '+')
  curl -sL "$http://danbooru.donmai.us/posts.json?tags=$tags&limit=200" | jq '.[] | .file_url' -r -M
}
safebooru(){
  tags=$(echo "$2"| tr ' ' '+');
  curl -sL "$http://safebooru.org/index.php?page=dapi&s=post&q=index&tags=$tags&limit=100" | sed 's/>/>\n/g' | tail +3 | grep "file_url" | while read -r ex ex1 ex2 file_url ex3; do
    echo "$file_url" | cut -d'=' -f2 | tr -d '"'
  done
}
rule34(){
  [ "$2" != "pool" ] && {
    tags=$(echo "$2"| tr ' ' '+');
    curl -sL "$http://rule34.xxx//index.php?page=dapi&s=post&q=index&tags=$tags&limit=1000&pid=${pid:-0}" | sed 's/>/>\n/g' | tail +3 | grep "file_url" | while read -r ex ex1 ex2 file_url ex3; do
      echo "$file_url" | cut -d'=' -f2 | tr -d '"'
    done
  :;} || {
    while read -r p || [ -n "$p" ]; do
      IFS=""
      p="${p##*f=\"}"; p="${p%%&amp*}"; p="${p##*id=}"
      file_url=$(curl -sL "http://rule34.xxx//index.php?page=dapi&s=post&q=index&id=$p" | sed 's/>/>\n/g' | tail +3);
      file_url="${file_url##*file_url=\"}"; file_url="${file_url%%\"*}"
      echo "$file_url"
    done << EOF
$(curl -sL "https://rule34.xxx/index.php?page=pool&s=show&id=${3:?A pool ID is required}" | grep "&id=")
EOF
  }
}
e621(){
  tags=$(echo "$2"| tr ' ' '+');
  curl -sL "$http://e621.net/posts.json?tags=$tags&limit=120" --user-agent "booru34sh (https://github.com/ThatGeekyWeeb/booru34sh)" | jq '.[] | .[] | .file.url' -r -M # e621 requires a UA
}
ran(){
  IFS=""; [ "$3" ] && { blk=${3#-}; } || { blk="danbooru"; } # service blacklist
  # defaults to danbooru; due to 2 tag max
  list=$(printf "%s\n" safebooru danbooru rule34 e621 | shuf | sed -e "/${blk}/d" | head -1) 
  echo "Using $list"; unset IFS ; ${list} - "${2:-$1}"; exit 0
} 
deps
case "$(basename $0)" in
  booru34sh)
    case "$1" in
      danbooru|safebooru|r34|rule34|e621)
        [ "$1" = "r34" ] && { rule34 "$@"; exit 0; } || { ${1} "$@"; };;
      ""|*)
        ran "$@"
        ;; # random service imp || WIP
    esac
  ;;
  *)
    t=$(basename $0)
    type ${t} 2>/dev/null 1>/dev/null && {
      ${t} - "$@" # $1 is unused by functions so use a placeholder
    } || { echo "$t is not a valid func???"; exit 1; }
  # this allows for symlinking to scripts for easy calling
  # ie: danbooru <tags> # would call booru34sh using the danbooru service
  ;;
esac
